@page
@model Backoffice.Pages.TasksManager.IndexModel
@{
    ViewData["Title"] = "Tasks";
}

<link href="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css" rel="stylesheet">
<style>
    .weekend {
        background: var(--dhx-gantt-base-colors-background-alt);
    }
</style>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Tasks</h1>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newTaskModal">
            <i class="fas fa-plus me-2"></i>New Task
        </button>
    </div>

    <!-- View Switcher -->
    <ul class="nav nav-tabs mb-4">
        <li class="nav-item">
            <a class="nav-link active" data-bs-toggle="tab" href="#gantt">Gantt View</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#kanban">Kanban View</a>
        </li>
    </ul>

    <div class="tab-content">
        <!-- Gantt View -->
        <div class="tab-pane fade show active" id="gantt">
            <div id="gantt_container" style="height: 600px;"></div>
        </div>

        <!-- Kanban View -->
        <div class="tab-pane fade" id="kanban">
            <div class="row">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">To Do</h5>
                        </div>
                        <div class="card-body">
                            <div class="kanban-column" data-status="todo">
                                @foreach (var task in Model.Tasks.Where(t => t.Status == "todo"))
                                {
                                    <div class="card mb-2 task-card" data-task-id="@task.Id" data-task-title="@task.Title">
                                        <div class="card-body">
                                            <h6 class="card-title">@task.Title</h6>
                                            <p class="card-text small">@task.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-dark">@task.User?.Name</span>
                                                <small>@task.EndDate?.ToString("MM/dd/yyyy")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">In Progress</h5>
                        </div>
                        <div class="card-body">
                            <div class="kanban-column" data-status="in-progress">
                                @foreach (var task in Model.Tasks.Where(t => t.Status == "in-progress"))
                                {
                                    <div class="card mb-2 task-card" data-task-id="@task.Id" data-task-title="@task.Title">
                                        <div class="card-body">
                                            <h6 class="card-title">@task.Title</h6>
                                            <p class="card-text small">@task.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-dark">@task.User?.Name</span>
                                                <small>@task.EndDate?.ToString("MM/dd/yyyy")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Done</h5>
                        </div>
                        <div class="card-body">
                            <div class="kanban-column" data-status="done">
                                @foreach (var task in Model.Tasks.Where(t => t.Status == "done"))
                                {
                                    <div class="card mb-2 task-card" data-task-id="@task.Id" data-task-title="@task.Title">
                                        <div class="card-body">
                                            <h6 class="card-title">@task.Title</h6>
                                            <p class="card-text small">@task.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-dark">@task.User?.Name</span>
                                                <small>@task.EndDate?.ToString("MM/dd/yyyy")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Task Modal -->
<div class="modal fade" id="newTaskModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post">
                <div class="modal-header">
                    <h5 class="modal-title">New Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label asp-for="NewTask.Title" class="form-label">Title</label>
                        <input asp-for="NewTask.Title" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.Description" class="form-label">Description</label>
                        <textarea asp-for="NewTask.Description" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label asp-for="NewTask.StartDate" class="form-label">Start Date</label>
                            <input asp-for="NewTask.StartDate" type="date" class="form-control" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="NewTask.EndDate" class="form-label">End Date</label>
                            <input asp-for="NewTask.EndDate" type="date" class="form-control" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.Status" class="form-label">Status</label>
                        <select asp-for="NewTask.Status" asp-items="Model.Statuses" class="form-select" required></select>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.AssignedToId" class="form-label">Assigned To</label>
                        <select asp-for="NewTask.AssignedToId" asp-items="Model.Users" class="form-select">
                            <option value="">-- Select User --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.ProjectId" class="form-label">Projet</label>
                        <select asp-for="NewTask.ProjectId" asp-items="Model.Projects" class="form-select" required>
                            <option value="">-- Sélectionner un projet --</option>
                        </select>
                        <span asp-validation-for="NewTask.ProjectId" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        // Ajouter au début du script
        document.addEventListener('DOMContentLoaded', function() {
            // Attendre que Bootstrap soit complètement chargé
            const activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                const tab = document.querySelector(`a[href="${activeTab}"]`);
                if (tab) {
                    const bsTab = new bootstrap.Tab(tab);
                    bsTab.show();
                }
            }
        });

        // Sauvegarder l'onglet actif lors du changement
        document.querySelectorAll('a[data-bs-toggle="tab"]').forEach(tab => {
            tab.addEventListener('shown.bs.tab', function(e) {
                localStorage.setItem('activeTab', e.target.getAttribute('href'));
            });
        });

        gantt.plugins({
            auto_scheduling: true
        });

        gantt.templates.scale_cell_class = function (date) {
            if (!gantt.isWorkTime(date)) {
                return "weekend";
            }
        };
        gantt.templates.timeline_cell_class = function (item, date) {
            if (!gantt.isWorkTime(date)) {
                return "weekend";
            }
        };

        gantt.config.links = {
            "finish_to_start": "0",
            "start_to_start": "1",
            "finish_to_finish": "2",
            "start_to_finish": "3"
        };

        gantt.config.work_time = true;


        gantt.config.auto_scheduling = true;
        gantt.config.auto_scheduling_strict = true;
        gantt.config.auto_scheduling_compatibility = true;
        
        function calculateResourceLoad(tasks, scale) {
            var step = scale.unit;
            var timegrid = {};

            for (var i = 0; i < tasks.length; i++) {
                var task = tasks[i];

                var currDate = gantt.date[step + "_start"](new Date(task.start_date));

                while (currDate < task.end_date) {

                    var date = currDate;
                    currDate = gantt.date.add(currDate, 1, step);

                    if (!gantt.isWorkTime({date: date, task: task})) {
                        continue;
                    }

                    var timestamp = date.valueOf();
                    if (!timegrid[timestamp])
                        timegrid[timestamp] = 0;

                    timegrid[timestamp] += 8;
                }
            }

            var timetable = [];
            var start, end;
            for (var i in timegrid) {
                start = new Date(i * 1);
                end = gantt.date.add(start, 1, step);
                timetable.push({
                    start_date: start,
                    end_date: end,
                    value: timegrid[i]
                });
            }

            return timetable;
        }


        var renderResourceLine = function (resource, timeline) {
            var tasks = gantt.getTaskBy("user", resource.id);
            var timetable = calculateResourceLoad(tasks, timeline.getScale());

            var row = document.createElement("div");

            for (var i = 0; i < timetable.length; i++) {

                var day = timetable[i];

                var css = "";
                if (day.value <= 8) {
                    css = "gantt_resource_marker gantt_resource_marker_ok";
                } else {
                    css = "gantt_resource_marker gantt_resource_marker_overtime";
                }

                var sizes = timeline.getItemPosition(resource, day.start_date, day.end_date);
                var el = document.createElement('div');
                el.className = css;

                el.style.cssText = [
                    'left:' + sizes.left + 'px',
                    'width:' + sizes.width + 'px',
                    'position:absolute',
                    'height:' + (gantt.config.row_height - 1) + 'px',
                    'line-height:' + sizes.height + 'px',
                    'top:' + sizes.top + 'px'
                ].join(";");

                el.innerHTML = day.value;
                row.appendChild(el);
            }
            return row;
        };

        var resourceLayers = [
            renderResourceLine,
            "taskBg"
        ];

        var mainGridConfig = {
            columns: [
                {name: "text", tree: true, width: 200, resize: true},
                {name: "start_date", align: "center", width: 100, resize: true},
                {
                    name: "owner", align: "center", width: 100, label: "Owner", template: function (task) {
                        var store = gantt.getDatastore("resources");
                        var owner = store.getItem(task.user);
                        if (owner) {
                            return owner.label;
                        } else {
                            return "Unassigned";
                        }
                    }
                },
                {name: "duration", width: 70, align: "center"},
                {name: "add", width: 44}
            ]
        };

        var resourcePanelConfig = {
            columns: [
                {
                    name: "name", label: "Name", template: function (resource) {
                        return resource.label;
                    }
                },
                {
                    name: "workload", label: "Workload", template: function (resource) {
                        var tasks = gantt.getTaskBy("user", resource.id);

                        var totalDuration = 0;
                        for (var i = 0; i < tasks.length; i++) {
                            totalDuration += tasks[i].duration;
                        }

                        return (totalDuration || 0) * 8 + "";
                    }
                }
            ]
        };

        gantt.config.layout = {
            css: "gantt_container",
            rows: [
                {
                    cols: [
                        {view: "grid", group:"grids", config: mainGridConfig, scrollY: "scrollVer"},
                        {resizer: true, width: 1, group:"vertical"},
                        {view: "timeline", id: "timeline", scrollX: "scrollHor", scrollY: "scrollVer"},
                        {view: "scrollbar", id: "scrollVer", group:"vertical"}
                    ]
                },
                {resizer: true, width: 1},
                {
                    config: resourcePanelConfig,
                    cols: [
                        {
                            view: "grid",
                            id: "resourceGrid",
                            group:"grids",
                            bind: "resources",
                            scrollY: "resourceVScroll"
                        },
                        {resizer: true, width: 1, group:"vertical"},
                        {
                            view: "timeline",
                            id: "resourceTimeline",
                            bind: "resources",
                            bindLinks: null,
                            layers: resourceLayers,
                            scrollX: "scrollHor",
                            scrollY: "resourceVScroll"
                        },
                        {view: "scrollbar", id: "resourceVScroll", group:"vertical"}
                    ]
                },
                {view: "scrollbar", id: "scrollHor"}
            ]
        };

        var resourcesStore = gantt.createDatastore({
            name: "resources",
            initItem: function (item) {
                item.id = item.key || gantt.uid();
                return item;
            }
        });

        var tasksStore = gantt.getDatastore("task");
        tasksStore.attachEvent("onStoreUpdated", function (id, item, mode) {
            resourcesStore.refresh();
        });

        var labels = gantt.locale.labels;
        labels.column_owner = labels.section_owner = "Owner";

        gantt.serverList("staff", @Json.Serialize(Model.Users.Select(u => new {
            key = u.Value,
            label = u.Text
        })));

        gantt.config.lightbox.sections = [
            {name: "description", height: 38, map_to: "text", type: "textarea", focus: true},
            {
                name: "owner", 
                height: 22, 
                map_to: "user", 
                type: "select", 
                options: [
                    {key: 0, label: "Unassigned"},
                    ...gantt.serverList("staff")
                ]
            },
            {name: "time", type: "duration", map_to: "auto"}
        ];


        gantt.init("gantt_container");

        resourcesStore.parse(@Json.Serialize(Model.Users.Select(u => new {
            key = u.Value,
            label = u.Text
        })));

        gantt.parse({
            data: @Json.Serialize(Model.Tasks.Select(t => new {
                id = t.Id,
                text = t.Title,
                start_date = t.StartDate?.ToString("dd-MM-yyyy"),
                parent = t.ParentTaskId,
                duration = t.EstimatedDuration,
                user = t.User?.Id,
                end_date = t.EndDate?.ToString("dd-MM-yyyy"),
                progress = t.Status == "done" ? 1 : t.Status == "in-progress" ? 0.5 : 0,
            })),
            links: @Json.Serialize(Model.TaskLinks.Select(l => new {
                id = l.Id,
                source = l.TaskFromId,
                target = l.TaskToId,
                type = l.LinkType  // finish_to_start par défaut
            }))
        });

        async function createTaskAsync(id, task) {
            try {

                const response = await fetch('?handler=CreateTask', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        title: task.text,
                        startDate: task.start_date,
                        endDate: task.end_date,
                        assignedToId: task.user || null,
                        duration: task.duration,
                        parentTaskId: parseInt(task.parent),
                        status: 'todo' // Statut par défaut pour les nouvelles tâches
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                gantt.message({type: "success", text: "Task created successfully"});
            } catch (error) {
                console.error('Error:', error);
                gantt.message({type: "error", text: "Failed to create task: " + error.message});
                // Annuler l'ajout de la tâche dans le Gantt si l'enregistrement échoue
                gantt.deleteTask(id);
            }
        }

        gantt.attachEvent("onAfterTaskAdd", function(id, task) {
            createTaskAsync(id, task);
        });

        async function updateTaskAsync(id, task){
            try{
                await updateTask({
                    id: id,
                    title: task.text,
                    startDate: task.start_date,
                    endDate: task.end_date,
                    assignedToId: task.user,
                    duration: task.duration
                }, 'UpdateTask');
                gantt.message({type: "success", text: "Task updated"});
            }catch(error){
                console.error('Error:', error);
                gantt.message({type: "error", text: "Failed to update task: " + error.message});
            }
        }

        gantt.attachEvent("onAfterTaskUpdate", function(id, task){
            console.log(id, task);
            updateTaskAsync(id, task);
        });

        // Initialize Sortable for Kanban
        document.querySelectorAll('.kanban-column').forEach(column => {
            new Sortable(column, {
                group: 'tasks',
                animation: 150,
                onEnd: function(evt) {
                    const taskId = evt.item.dataset.taskId;
                    const taskTitle = evt.item.dataset.taskTitle;
                    const newStatus = evt.to.dataset.status;
                    updateTask({
                        id: taskId,
                        status: newStatus,
                        title: taskTitle
                    }, 'UpdateStatusTask');
                }
            });
        });

        // Update task status
        async function updateTask(task, handler) {
            try {
                const response = await fetch(`?handler=${handler}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(task)
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Error:', errorText);
                    alert('Failed to update task status: ' + errorText);
                    return;
                }

                // Sauvegarder l'onglet actif avant le rechargement
                const activeTab = document.querySelector('.nav-link.active');
                if (activeTab) {
                    localStorage.setItem('activeTab', activeTab.getAttribute('href'));
                }

                // Rafraîchir la page
                window.location.reload();
                
            } catch (error) {
                console.error('Network error:', error);
                alert('Connection error: ' + error.message);
            }
        }
    </script>
}
