@page
@model Backoffice.Pages.TasksManager.IndexModel
@{
    ViewData["Title"] = "Tasks";
}

<link href="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css" rel="stylesheet">

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Tasks</h1>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newTaskModal">
            <i class="fas fa-plus me-2"></i>New Task
        </button>
    </div>

    <!-- View Switcher -->
    <ul class="nav nav-tabs mb-4">
        <li class="nav-item">
            <a class="nav-link active" data-bs-toggle="tab" href="#gantt">Gantt View</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#kanban">Kanban View</a>
        </li>
    </ul>

    <div class="tab-content">
        <!-- Gantt View -->
        <div class="tab-pane fade show active" id="gantt">
            <div id="gantt_container" style="height: 600px;"></div>
        </div>

        <!-- Kanban View -->
        <div class="tab-pane fade" id="kanban">
            <div class="row">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">To Do</h5>
                        </div>
                        <div class="card-body">
                            <div class="kanban-column" data-status="todo">
                                @foreach (var task in Model.Tasks.Where(t => t.Status == "todo"))
                                {
                                    <div class="card mb-2 task-card" data-task-id="@task.Id" data-task-title="@task.Title">
                                        <div class="card-body">
                                            <h6 class="card-title">@task.Title</h6>
                                            <p class="card-text small">@task.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-secondary">@task.User?.Name</span>
                                                <small>@task.EndDate?.ToString("MM/dd")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">In Progress</h5>
                        </div>
                        <div class="card-body">
                            <div class="kanban-column" data-status="in-progress">
                                @foreach (var task in Model.Tasks.Where(t => t.Status == "in-progress"))
                                {
                                    <div class="card mb-2 task-card" data-task-id="@task.Id" data-task-title="@task.Title">
                                        <div class="card-body">
                                            <h6 class="card-title">@task.Title</h6>
                                            <p class="card-text small">@task.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-secondary">@task.User?.Name</span>
                                                <small>@task.EndDate?.ToString("MM/dd")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Done</h5>
                        </div>
                        <div class="card-body">
                            <div class="kanban-column" data-status="done">
                                @foreach (var task in Model.Tasks.Where(t => t.Status == "done"))
                                {
                                    <div class="card mb-2 task-card" data-task-id="@task.Id" data-task-title="@task.Title">
                                        <div class="card-body">
                                            <h6 class="card-title">@task.Title</h6>
                                            <p class="card-text small">@task.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-secondary">@task.User?.Name</span>
                                                <small>@task.EndDate?.ToString("MM/dd")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Task Modal -->
<div class="modal fade" id="newTaskModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post">
                <div class="modal-header">
                    <h5 class="modal-title">New Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label asp-for="NewTask.Title" class="form-label">Title</label>
                        <input asp-for="NewTask.Title" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.Description" class="form-label">Description</label>
                        <textarea asp-for="NewTask.Description" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label asp-for="NewTask.StartDate" class="form-label">Start Date</label>
                            <input asp-for="NewTask.StartDate" type="date" class="form-control" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="NewTask.EndDate" class="form-label">End Date</label>
                            <input asp-for="NewTask.EndDate" type="date" class="form-control" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.Status" class="form-label">Status</label>
                        <select asp-for="NewTask.Status" asp-items="Model.Statuses" class="form-select" required></select>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.AssignedToId" class="form-label">Assigned To</label>
                        <select asp-for="NewTask.AssignedToId" asp-items="Model.Users" class="form-select">
                            <option value="">-- Select User --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewTask.ProjectId" class="form-label">Projet</label>
                        <select asp-for="NewTask.ProjectId" asp-items="Model.Projects" class="form-select" required>
                            <option value="">-- Sélectionner un projet --</option>
                        </select>
                        <span asp-validation-for="NewTask.ProjectId" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        // Initialize Gantt
        gantt.init("gantt_container");
        gantt.parse({
            data: @Json.Serialize(Model.Tasks.Select(t => new {
                id = t.Id,
                text = t.Title,
                start_date = t.StartDate?.ToString("dd-MM-yyyy"),
                parent = t.ParentTaskId,
                end_date = t.EndDate?.ToString("dd-MM-yyyy"),
                progress = t.Status == "done" ? 1 : t.Status == "in-progress" ? 0.5 : 0
            }))
        });

        gantt.attachEvent("onAfterTaskAdd", function(id, task){
        // Envoyer une requête AJAX pour créer la tâche dans la base de données
            alert("Task added");
            console.log(task, id);
        });

        gantt.attachEvent("onAfterTaskUpdate", function(id, task){
            alert("Task updated");
        });

        // Initialize Sortable for Kanban
        document.querySelectorAll('.kanban-column').forEach(column => {
            new Sortable(column, {
                group: 'tasks',
                animation: 150,
                onEnd: function(evt) {
                    const taskId = evt.item.dataset.taskId;
                    const taskTitle = evt.item.dataset.taskTitle;
                    const newStatus = evt.to.dataset.status;
                    updateTask({
                        id: taskId,
                        status: newStatus,
                        title: taskTitle
                    }, 'UpdateStatusTask');
                }
            });
        });

        // Update task status
        async function updateTask(task, handler) {
            try {
                const response = await fetch(`?handler=${handler}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(task)
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Error:', errorText);
                    alert('Failed to update task status: ' + errorText);
                }
            } catch (error) {
                console.error('Network error:', error);
                alert('Connection error: ' + error.message);
            }
        }
    </script>
}
